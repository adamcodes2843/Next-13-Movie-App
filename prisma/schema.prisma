// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Settings {
  id               Int @id @default(autoincrement())
  colorTheme       String @default("green")
  darkMode         Boolean @default(true)
  view             String @default("grid")
  userId           String @unique
  allowComments    Boolean @default(true)
  user             User @relation(fields: [userId], references: [id])
}

model Review {
  id                String @id @default(cuid())
  movie             String
  title             String @db.VarChar(100)
  rating            Int
  review            String @db.VarChar(800)
  voteCount         Int @default(1)
  dateTimePosted    DateTime @default(now())
  dateTimeUpdated   DateTime?
  comments          Comment[]
  userId            String
  user              User @relation(fields: [userId], references: [id])
}

model Comment {
  id                String @id @default(cuid())
  comment           String
  userId            String
  reviewId          String
  voteCount         Int @default(1)
  dateTimePosted    DateTime @default(now())
  dateTimeUpdated   DateTime?
  parentCommentId   String?
  parentComment     Comment? @relation("CommentBranch",fields: [parentCommentId], references: [id])
  childComments     Comment[] @relation("CommentBranch")
  review            Review @relation(fields: [reviewId], references: [id])
  user              User @relation(fields: [userId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  comments      Comment[]
  settings      Settings?
  favoriteMovie String?
  favoritePizza String?
  xp            Int @default(0)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}